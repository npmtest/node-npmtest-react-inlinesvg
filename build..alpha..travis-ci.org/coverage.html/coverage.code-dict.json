{"/home/travis/build/npmtest/node-npmtest-react-inlinesvg/test.js":"/* istanbul instrument in package npmtest_react_inlinesvg */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-inlinesvg/lib.npmtest_react_inlinesvg.js":"/* istanbul instrument in package npmtest_react_inlinesvg */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_react_inlinesvg = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_react_inlinesvg = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-react-inlinesvg/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-react-inlinesvg && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_react_inlinesvg */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_react_inlinesvg\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_react_inlinesvg.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_react_inlinesvg.rollup.js'] =\n            local.assetsDict['/assets.npmtest_react_inlinesvg.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_react_inlinesvg.__dirname + '/lib.npmtest_react_inlinesvg.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-react-inlinesvg/node_modules/react-inlinesvg/lib/index.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _once = require('once');\n\nvar _once2 = _interopRequireDefault(_once);\n\nvar _httpplease = require('httpplease');\n\nvar _httpplease2 = _interopRequireDefault(_httpplease);\n\nvar _oldiexdomain = require('httpplease/plugins/oldiexdomain');\n\nvar _oldiexdomain2 = _interopRequireDefault(_oldiexdomain);\n\nvar _shouldComponentUpdate = require('./shouldComponentUpdate');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar http = _httpplease2.default.use(_oldiexdomain2.default);\n\nvar Status = {\n  PENDING: 'pending',\n  LOADING: 'loading',\n  LOADED: 'loaded',\n  FAILED: 'failed',\n  UNSUPPORTED: 'unsupported'\n};\n\nvar getRequestsByUrl = {};\nvar loadedIcons = {};\n\nvar createGetOrUseCacheForUrl = function createGetOrUseCacheForUrl(url, callback) {\n  if (loadedIcons[url]) {\n    (function () {\n      var params = loadedIcons[url];\n\n      setTimeout(function () {\n        return callback(params[0], params[1]);\n      }, 0);\n    })();\n  }\n\n  if (!getRequestsByUrl[url]) {\n    getRequestsByUrl[url] = [];\n\n    http.get(url, function (err, res) {\n      getRequestsByUrl[url].forEach(function (cb) {\n        loadedIcons[url] = [err, res];\n        cb(err, res);\n      });\n    });\n  }\n\n  getRequestsByUrl[url].push(callback);\n};\n\nvar supportsInlineSVG = (0, _once2.default)(function () {\n  if (!document) {\n    return false;\n  }\n\n  var div = document.createElement('div');\n  div.innerHTML = '<svg />';\n  return div.firstChild && div.firstChild.namespaceURI === 'http://www.w3.org/2000/svg';\n});\n\nvar isSupportedEnvironment = (0, _once2.default)(function () {\n  return ((typeof window !== 'undefined' && window !== null ? window.XMLHttpRequest : false) || (typeof window !== 'undefined' && window !== null ? window.XDomainRequest : false)) && supportsInlineSVG();\n});\n\nvar uniquifyIDs = function () {\n  var mkAttributePattern = function mkAttributePattern(attr) {\n    return '(?:(?:\\\\s|\\\\:)' + attr + ')';\n  };\n\n  var idPattern = new RegExp('(?:(' + mkAttributePattern('id') + ')=\"([^\"]+)\")|(?:(' + mkAttributePattern('href') + '|' + mkAttributePattern('role') + '|' + mkAttributePattern('arcrole') + ')=\"\\\\#([^\"]+)\")|(?:=\"url\\\\(\\\\#([^\\\\)]+)\\\\)\")', 'g');\n\n  return function (svgText, svgID) {\n    var uniquifyID = function uniquifyID(id) {\n      return id + '___' + svgID;\n    };\n\n    return svgText.replace(idPattern, function (m, p1, p2, p3, p4, p5) {\n      //eslint-disable-line consistent-return\n      if (p2) {\n        return p1 + '=\"' + uniquifyID(p2) + '\"';\n      } else if (p4) {\n        return p3 + '=\"#' + uniquifyID(p4) + '\"';\n      } else if (p5) {\n        return '=\"url(#' + uniquifyID(p5) + ')\"';\n      }\n    });\n  };\n}();\n\nvar getHash = function getHash(str) {\n  var chr = void 0;\n  var hash = 0;\n  var i = void 0;\n  var j = void 0;\n  var ref = void 0;\n\n  if (!str) {\n    return hash;\n  }\n\n  for (i = j = 0, ref = str.length; ref >= 0 ? j < ref : j > ref; i = ref >= 0 ? ++j : --j) {\n    chr = str.charCodeAt(i);\n    hash = (hash << 5) - hash + chr;\n    hash &= hash;\n  }\n\n  return hash;\n};\n\nvar InlineSVGError = function (_Error) {\n  _inherits(InlineSVGError, _Error);\n\n  function InlineSVGError(message) {\n    var _ret2;\n\n    _classCallCheck(this, InlineSVGError);\n\n    var _this = _possibleConstructorReturn(this, (InlineSVGError.__proto__ || Object.getPrototypeOf(InlineSVGError)).call(this));\n\n    _this.name = 'InlineSVGError';\n    _this.isSupportedBrowser = true;\n    _this.isConfigurationError = false;\n    _this.isUnsupportedBrowserError = false;\n    _this.message = message;\n\n    return _ret2 = _this, _possibleConstructorReturn(_this, _ret2);\n  }\n\n  return InlineSVGError;\n}(Error);\n\nvar createError = function createError(message, attrs) {\n  var err = new InlineSVGError(message);\n\n  Object.keys(attrs).forEach(function (k) {\n    err[k] = attrs[k];\n  });\n\n  return err;\n};\n\nvar unsupportedBrowserError = function unsupportedBrowserError(message) {\n  var newMessage = message;\n\n  if (newMessage === null) {\n    newMessage = 'Unsupported Browser';\n  }\n\n  return createError(newMessage, {\n    isSupportedBrowser: false,\n    isUnsupportedBrowserError: true\n  });\n};\n\nvar configurationError = function configurationError(message) {\n  return createError(message, {\n    isConfigurationError: true\n  });\n};\n\nvar InlineSVG = function (_React$Component) {\n  _inherits(InlineSVG, _React$Component);\n\n  function InlineSVG(props) {\n    _classCallCheck(this, InlineSVG);\n\n    var _this2 = _possibleConstructorReturn(this, (InlineSVG.__proto__ || Object.getPrototypeOf(InlineSVG)).call(this, props));\n\n    _this2.shouldComponentUpdate = _shouldComponentUpdate.shouldComponentUpdate;\n\n\n    _this2.state = {\n      status: Status.PENDING\n    };\n\n    _this2.handleLoad = _this2.handleLoad.bind(_this2);\n    _this2.isActive = false;\n    return _this2;\n  }\n\n  _createClass(InlineSVG, [{\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      this.isActive = true;\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      if (this.state.status === Status.PENDING) {\n        if (this.props.supportTest()) {\n          if (this.props.src) {\n            this.startLoad();\n          } else {\n            this.fail(configurationError('Missing source'));\n          }\n        } else {\n          this.fail(unsupportedBrowserError());\n        }\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.isActive = false;\n    }\n  }, {\n    key: 'fail',\n    value: function fail(error) {\n      var _this3 = this;\n\n      var status = error.isUnsupportedBrowserError ? Status.UNSUPPORTED : Status.FAILED;\n\n      if (this.isActive) {\n        this.setState({ status: status }, function () {\n          if (typeof _this3.props.onError === 'function') {\n            _this3.props.onError(error);\n          }\n        });\n      }\n    }\n  }, {\n    key: 'handleLoad',\n    value: function handleLoad(err, res) {\n      var _this4 = this;\n\n      if (err) {\n        this.fail(err);\n        return;\n      }\n\n      if (this.isActive) {\n        this.setState({\n          loadedText: res.text,\n          status: Status.LOADED\n        }, function () {\n          return typeof _this4.props.onLoad === 'function' ? _this4.props.onLoad() : null;\n        });\n      }\n    }\n  }, {\n    key: 'startLoad',\n    value: function startLoad() {\n      if (this.isActive) {\n        this.setState({\n          status: Status.LOADING\n        }, this.load);\n      }\n    }\n  }, {\n    key: 'load',\n    value: function load() {\n      var match = this.props.src.match(/data:image\\/svg[^,]*?(;base64)?,(.*)/);\n      if (match) {\n        return this.handleLoad(null, {\n          text: match[1] ? atob(match[2]) : decodeURIComponent(match[2])\n        });\n      }\n      if (this.props.cacheGetRequests) {\n        return createGetOrUseCacheForUrl(this.props.src, this.handleLoad);\n      }\n\n      return http.get(this.props.src, this.handleLoad);\n    }\n  }, {\n    key: 'getClassName',\n    value: function getClassName() {\n      var className = 'isvg ' + this.state.status;\n\n      if (this.props.className) {\n        className += ' ' + this.props.className;\n      }\n\n      return className;\n    }\n  }, {\n    key: 'processSVG',\n    value: function processSVG(svgText) {\n      if (this.props.uniquifyIDs) {\n        return uniquifyIDs(svgText, getHash(this.props.src));\n      }\n\n      return svgText;\n    }\n  }, {\n    key: 'renderContents',\n    value: function renderContents() {\n      switch (this.state.status) {\n        case Status.UNSUPPORTED:\n        case Status.FAILED:\n          return this.props.children;\n        default:\n          return this.props.preloader;\n      }\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return this.props.wrapper({\n        className: this.getClassName(),\n        dangerouslySetInnerHTML: this.state.loadedText ? {\n          __html: this.processSVG(this.state.loadedText)\n        } : undefined\n      }, this.renderContents());\n    }\n  }]);\n\n  return InlineSVG;\n}(_react2.default.Component);\n\nInlineSVG.propTypes = {\n  cacheGetRequests: _react2.default.PropTypes.bool,\n  children: _react2.default.PropTypes.node,\n  className: _react2.default.PropTypes.string,\n  onError: _react2.default.PropTypes.func,\n  onLoad: _react2.default.PropTypes.func,\n  preloader: _react2.default.PropTypes.func,\n  src: _react2.default.PropTypes.string.isRequired,\n  supportTest: _react2.default.PropTypes.func,\n  uniquifyIDs: _react2.default.PropTypes.bool,\n  wrapper: _react2.default.PropTypes.func\n};\nInlineSVG.defaultProps = {\n  wrapper: _react2.default.DOM.span,\n  supportTest: isSupportedEnvironment,\n  uniquifyIDs: true,\n  cacheGetRequests: false\n};\nexports.default = InlineSVG;\nmodule.exports = exports['default'];","/home/travis/build/npmtest/node-npmtest-react-inlinesvg/node_modules/react-inlinesvg/lib/shouldComponentUpdate.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.shouldComponentUpdate = shouldComponentUpdate;\nexports.shouldComponentUpdateContext = shouldComponentUpdateContext;\n\nvar _shallowEqual = require('fbjs/lib/shallowEqual');\n\nvar _shallowEqual2 = _interopRequireDefault(_shallowEqual);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\n/**\n *  @module PureRender\n */\n\n/**\n * shouldComponentUpdate without context.\n *\n * @requires shallowEqual\n *\n * @param {Object} nextProps\n * @param {Object} nextState\n *\n * @returns {boolean}\n */\nfunction shouldComponentUpdate(nextProps, nextState) {\n  return !(0, _shallowEqual2.default)(this.props, nextProps) || !(0, _shallowEqual2.default)(this.state, nextState);\n}\n\n/**\n * shouldComponentUpdate with context.\n *\n * @requires shallowEqual\n *\n * @param {Object} nextProps\n * @param {Object} nextState\n * @param {Object} nextContext\n *\n * @returns {boolean}\n */\nfunction shouldComponentUpdateContext(nextProps, nextState, nextContext) {\n  return !(0, _shallowEqual2.default)(this.props, nextProps) || !(0, _shallowEqual2.default)(this.state, nextState) || !(0, _shallowEqual2.default)(this.context, nextContext);\n}\n\nexports.default = { shouldComponentUpdate: shouldComponentUpdate, shouldComponentUpdateContext: shouldComponentUpdateContext };"}